"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { load } = require("./ignore");
const { resolve } = require("path");
const { walk } = require("./util/fs");
const { zip } = require("./util/zip");

exports.gatherFiles = (() => {
  var _ref = _asyncToGenerator(function* (path) {
    const foxxignore = resolve(path, ".foxxignore");
    const shouldIgnore = yield load(foxxignore);
    return yield walk(path, shouldIgnore);
  });

  function gatherFiles(_x) {
    return _ref.apply(this, arguments);
  }

  return gatherFiles;
})();

exports.createBundle = (() => {
  var _ref2 = _asyncToGenerator(function* (path, dest) {
    const files = yield exports.gatherFiles(path);
    return yield zip(path, files, dest);
  });

  function createBundle(_x2, _x3) {
    return _ref2.apply(this, arguments);
  }

  return createBundle;
})();