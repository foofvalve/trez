"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { bold, gray, white } = require("chalk");
const { common, serverArgs } = require("../util/cli");
const { fatal, info, json } = require("../util/log");

const client = require("../util/client");
const { ERROR_SERVICE_NOT_FOUND } = require("../errors");
const resolveServer = require("../resolveServer");

const command = exports.command = "show <mount>";
exports.description = "Show mounted service information";
const aliases = exports.aliases = ["info"];

const describe = `Shows detailed information about the service installed at the given ${bold("mount")}.`;

const args = [["mount", "Mount path of the service"]];

exports.builder = yargs => common(yargs, { command, aliases, describe, args }).options(_extends({}, serverArgs, {
  raw: {
    describe: "Output raw JSON response",
    type: "boolean",
    default: false
  }
})).example("$0 show /hello", 'Shows information about a Foxx service at the URL "/hello"').example("$0 show --server http://locahost:8530 /hello", "Use the server on port 8530 instead of the default").example("$0 show --database mydb /hello", 'Use the database "mydb" instead of the default').example("$0 show --server dev /hello", 'Use the "dev" server instead of the default. See the "server" command for details');

exports.handler = (() => {
  var _ref = _asyncToGenerator(function* (argv) {
    try {
      const server = yield resolveServer(argv);
      const db = client(server);
      const result = yield db.getService(argv.mount);
      if (argv.raw) {
        json(result);
      } else {
        const parts = ["Mount:", result.mount];
        if (result.legacy) parts.push(gray("(legacy)"));
        if (result.development) parts.push(bold("[DEV]"));
        info(parts.join(" "));
        if (result.name) info(`Name: ${result.name}`);
        if (result.version) info(`Version: ${result.version}`);
        info(`Path: ${result.path}`);
        info(`Checksum: ${result.checksum}`);
      }
    } catch (e) {
      if (e.isArangoError && e.errorNum === ERROR_SERVICE_NOT_FOUND) {
        fatal(`No service found at "${white(argv.mount)}".`);
      }
      fatal(e);
    }
  });

  function handler(_x) {
    return _ref.apply(this, arguments);
  }

  return handler;
})();