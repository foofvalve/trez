"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { bold, gray } = require("chalk");
const { common, serverArgs } = require("../util/cli");
const { detail, fatal, info, json } = require("../util/log");

const client = require("../util/client");
const { group } = require("../util/text");
const resolveServer = require("../resolveServer");

const command = exports.command = "list";
exports.description = "List mounted services";
const aliases = exports.aliases = ["ls"];

const describe = "Shows an overview of all installed services.";

exports.builder = yargs => common(yargs, { command, aliases, describe }).options(_extends({}, serverArgs, {
  all: {
    describe: "Include system services",
    alias: "a",
    type: "boolean",
    default: false
  },
  raw: {
    describe: "Output raw JSON responses",
    type: "boolean",
    default: false
  }
})).example("$0 list", "Shows all installed services not including system services").example("$0 list -a", "Shows all installed services including system services").example("$0 list --server http://localhost:8530", "Use the server on port 8530 instead of the default").example("$0 list --database mydb", 'Use the database "mydb" instead of the default');

exports.handler = (() => {
  var _ref = _asyncToGenerator(function* (argv) {
    try {
      const server = yield resolveServer(argv);
      const db = client(server);
      let services = yield db.listServices();
      if (!argv.all) {
        services = services.filter(function (service) {
          return !service.mount.startsWith("/_");
        });
      }
      if (argv.raw) {
        json(services);
      } else if (services.length) {
        info(group(...services.map(function (service) {
          return [service.development ? bold(service.mount) : service.mount, prettyVersion(service)];
        })));
      } else if (argv.verbose) {
        detail("No services available.");
      }
    } catch (e) {
      fatal(e);
    }
  });

  function handler(_x) {
    return _ref.apply(this, arguments);
  }

  return handler;
})();

function prettyVersion(service) {
  let parts = [];
  if (service.name && service.version) {
    parts.push(`${service.name}@${service.version}`);
  } else {
    if (service.name) parts.push(service.name);
    if (service.version) parts.push(service.version);
  }
  if (service.legacy) parts.push(gray("(legacy)"));
  if (service.development) parts.push(bold("[DEV]"));
  return parts.join(" ");
}