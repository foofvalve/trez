"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { common } = require("../../util/cli");
const { fatal } = require("../../util/log");
const { load: loadIni, save: saveIni } = require("../../ini");

const command = exports.command = "remove <name>";
exports.description = "Remove server";
const aliases = exports.aliases = ["rm"];

const describe = "Removes a server from the list of known servers.";

const args = [["name", "Server name to forget"]];

exports.builder = yargs => common(yargs, { command, sub: "server", aliases, describe, args }).example("$0 server remove dev", 'Removes the server named "dev"');

exports.handler = (() => {
  var _ref = _asyncToGenerator(function* (argv) {
    try {
      const ini = yield loadIni();
      const servers = Object.keys(ini.server);
      if (!servers || !servers.includes(argv.name)) return;
      delete ini.server[argv.name];
      return yield saveIni(ini);
    } catch (e) {
      fatal(e);
    }
  });

  function handler(_x) {
    return _ref.apply(this, arguments);
  }

  return handler;
})();