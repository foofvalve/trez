"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { common, serverArgs } = require("../../util/cli");
const { load: loadIni, save: saveIni } = require("../../ini");

const { fatal } = require("../../util/log");
const { omit } = require("lodash");
const resolveServer = require("../../resolveServer");
const { white } = require("chalk");

const command = exports.command = "set <name> <server>";
exports.description = "Define server";
const aliases = exports.aliases = ["add"];

const describe = "Defines a server under a given alias including its credentials.";

const args = [["name", "Server name to define"], ["server", "URL of the ArangoDB server"]];

exports.builder = yargs => common(yargs, { command, sub: "server", aliases, describe, args }).options(_extends({}, omit(serverArgs, ["server"]))).example("$0 server set dev http://localhost:8529", 'Set the "dev" server to the ArangoDB instance at "http://localhost:8529" with the default username and password').example("$0 server set dev http://localhost:8529 -D mydb", 'Use the database "mydb" instead of "_system"').example("$0 server set dev http://localhost:8529 -u devel", 'Authenticate with user "devel" and an empty password').example("$0 server set dev http://localhost:8529 -u devel -P", 'Authenticate with user "devel" and a password read from stdin').example("$0 server set dev http://localhost:8529 -T", "Authenticate with a bearer token read from stdin").example("$0 server set dev http://devel:@mydbserver.example:8529", "Username and password can be passed via the URL (in this case the password is empty)").example("$0 server set dev tcp://localhost:8529", 'The protocol "tcp" can be used as an alias for "http"').example("$0 server set dev ssl://localhost:8529", 'The protocol "ssl" can be used as an alias for "https"').example("$0 server set dev //localhost:8529", 'If omitted the protocol defaults to "http"').example("$0 server set dev unix:///tmp/arangod.sock", 'Unix sockets work with the unix protocol instead of "http".').example("$0 server set dev https+unix:///tmp/arangod.sock", 'For HTTPS over unix sockets, just use the "https+unix" protocol.').example("$0 server set dev http://unix:/tmp/arangod.sock", "The conventional unix socket URL format is also supported.").example("$0 server set dev http://localhost:8529 -V 3.2.0", "Explicitly setting the expected ArangoDB version can be useful when using servers running different versions");

exports.handler = (() => {
  var _ref = _asyncToGenerator(function* (argv) {
    if (argv.name.startsWith("/")) {
      fatal(`The server name must not start with a slash: "${white(argv.name)}".`);
    }
    try {
      const server = yield resolveServer(argv);
      const ini = yield loadIni();
      ini.server[argv.name] = omit(server, ["name"]);
      return yield saveIni(ini);
    } catch (e) {
      fatal(e);
    }
  });

  function handler(_x) {
    return _ref.apply(this, arguments);
  }

  return handler;
})();