"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { common } = require("../../util/cli");
const { info, fatal } = require("../../util/log");
const { group } = require("../../util/text");
const { load: loadIni } = require("../../ini");

const command = exports.command = "list";
exports.description = "List known servers";
const aliases = exports.aliases = ["ls"];

const describe = `List all known servers by their aliases.`;

exports.builder = yargs => common(yargs, { command, sub: "server", aliases, describe }).describe("verbose", "Include URLs").example("$0 server list", "Shows all known servers").example("$0 server list -v", "Shows all known servers and their URLs");

exports.handler = (() => {
  var _ref = _asyncToGenerator(function* (argv) {
    try {
      const ini = yield loadIni();
      const servers = Object.keys(ini.server);
      if (!servers) return;
      if (argv.verbose) {
        info(group(...servers.map(function (name) {
          return [name, ini.server[name].url];
        })));
      } else {
        for (const name of servers) {
          info(name);
        }
      }
    } catch (e) {
      fatal(e);
    }
  });

  function handler(_x) {
    return _ref.apply(this, arguments);
  }

  return handler;
})();