"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { ERROR_SERVICE_NOT_FOUND } = require("../errors");
const { common, serverArgs } = require("../util/cli");
const { error, fatal, info, json } = require("../util/log");

const { bold, gray, white } = require("chalk");
const client = require("../util/client");
const { inline: il } = require("../util/text");
const parseOptions = require("../util/parseOptions");
const resolveServer = require("../resolveServer");
const streamToBuffer = require("../util/streamToBuffer");

const command = exports.command = "config <mount> [options..]";
exports.description = "Manage the configuration of a mounted service";
const aliases = exports.aliases = ["configuration", "cfg"];

const describe = il`Updates or fetches the current configuration for the service at the given ${bold("mount")} path.

Returns an object mapping the configuration option names to their definitions including a human-friendly title and the current value (if any).`;

const args = [["mount", "Mount path of the service"], ["options", `Key-value pairs to apply to the configuration. Use ${bold("@")} to pass a JSON file from stdin`]];

exports.builder = yargs => common(yargs, { command, aliases, describe, args }).options(_extends({}, serverArgs, {
  force: {
    describe: il`
          Clear existing values for any omitted configuration options.
          Note that clearing required options with no default value will
          result in the service being disabled until new values are provided.
        `,
    alias: "f",
    type: "boolean",
    default: false
  },
  raw: {
    describe: "Output service configuration as raw JSON",
    type: "boolean",
    default: false
  },
  minimal: {
    describe: "Print minimal output",
    type: "boolean",
    default: false
  }
})).example("$0 config /myfoxx", 'Shows the configuration for the mounted service at the URL "/myfoxx"').example("$0 config /myfoxx someNumber=23", 'Sets the "someNumber" configuration option to the number 23').example("$0 config /myfoxx -f someNumber=23", 'Sets the "someNumber" configuration option and clears all other options').example("echo '{\"someNumber\": 23}' | $0 config /myfoxx @", "Sets the configuration using JSON data from stdin").example("$0 config /myfoxx -f", "Clears the service configuration");

exports.handler = (() => {
  var _ref = _asyncToGenerator(function* (argv) {
    let options = parseOptions(argv.options);
    if (!options && argv.force) {
      options = {};
    } else if (options === "@") {
      const output = yield streamToBuffer(process.stdin);
      let json;
      try {
        json = output.toString("utf-8");
      } catch (e) {
        fatal("Not a valid JSON string");
      }
      try {
        options = JSON.parse(json);
      } catch (e) {
        fatal(e.message);
      }
    }
    try {
      const server = yield resolveServer(argv);
      const db = client(server);
      let result;
      if (!options) {
        result = yield db.getServiceConfiguration(argv.mount);
      } else if (argv.force) {
        result = yield db.replaceServiceConfiguration(argv.mount, options);
      } else {
        result = yield db.updateServiceConfiguration(argv.mount, options);
      }
      if (argv.raw) {
        if (argv.minimal) {
          result = Object.keys(result).reduce(function (obj, key) {
            obj.values[key] = result[key].current;
            if (result[key].warning) {
              if (!obj.warnings) obj.warnings = {};
              obj.warnings[key] = result[key].warning;
            }
            return obj;
          }, { values: {} });
          if (!options) json(result.values);else json(result);
        } else json(result);
      } else if (argv.minimal) {
        for (const key of Object.keys(result)) {
          const dfn = result[key];
          if (dfn.warning) error(`${key}: ${dfn.warning}`);
          if (dfn.current === undefined) info(`${key}: ${gray("N/A")}`);else info(`${key}: ${dfn.current}`);
        }
      } else {
        let i = Object.keys(result).length;
        for (const key of Object.keys(result)) {
          const dfn = result[key];
          info(bold(dfn.title));
          info(`Key: ${key}`);
          const parts = [`Type: ${dfn.type}`];
          if (!dfn.required) parts.push(gray("(optional)"));
          info(parts.join(" "));
          if (dfn.current === undefined) info(`Value: ${gray("N/A")}`);else info(`Value: ${dfn.current}`);
          info(dfn.description);
          if (i-- > 1) info("");
        }
      }
    } catch (e) {
      if (e.isArangoError && e.errorNum === ERROR_SERVICE_NOT_FOUND) {
        fatal(`No service found at "${white(argv.mount)}"`);
      }
      fatal(e);
    }
  });

  function handler(_x) {
    return _ref.apply(this, arguments);
  }

  return handler;
})();