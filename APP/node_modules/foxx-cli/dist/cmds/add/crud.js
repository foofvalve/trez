"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { white } = require("chalk");
const { common } = require("../../util/cli");
const { fatal } = require("../../util/log");
const generator = require("../../generator");
const fs = require("../../util/fs");
const path = require("path");

const command = exports.command = "crud <collection>";
exports.description = "Add a CRUD router";
const describe = 'Creates a router file with CRUD operations for the given collection under "api/<collection>.js" and adds it to the main JavaScript file of the service.';

const args = [["collection", "Name of the collection for the CRUD operations to be added."]];

exports.builder = yargs => common(yargs, { command, describe, args }).options({
  edge: {
    describe: "Create CRUD operations for an edge collection (different schema validation)",
    alias: "e",
    type: "boolean",
    default: false
  },
  unprefixed: {
    describe: "Create CRUD operations for an unprefixed collection",
    alias: "u",
    type: "boolean",
    default: false
  }
}).example("$0 add crud kittens", 'Adds a CRUD router for the collection "kittens" to the local service').example("$0 add crud kittens -e", 'Adds a CRUD router for the edge collection "kittens"').example("$0 add crud kittens -u", 'Adds a CRUD router for the unprefixed collection "kittens"');

exports.handler = (() => {
  var _ref = _asyncToGenerator(function* (argv) {
    const manifestPath = path.resolve(process.cwd(), "manifest.json");
    if (!(yield fs.exists(manifestPath))) {
      fatal("Current directory does not contain a manifest file.");
    }
    const cruds = path.resolve(process.cwd(), "api");
    const crud = path.resolve(cruds, `${argv.collection}.js`);
    if (yield fs.exists(crud)) {
      fatal(`Router "${white(crud)}" already exists.`);
    }
    const manifest = JSON.parse((yield fs.readFile(manifestPath)));
    const mainPath = path.resolve(process.cwd(), manifest.main || "index.js");
    if (!(yield fs.exists(mainPath))) {
      yield fs.writeFile(mainPath, (yield generator.generateIndex()));
    }
    if (!(yield fs.exists(cruds))) {
      yield fs.mkdir(cruds);
    }
    yield fs.writeFile(crud, (yield generator.generateCrud(argv.collection, argv.edge, !argv.unprefixed)));
    const main = yield fs.readFile(mainPath, "utf-8");
    const newMain = `${main.replace(/\n$/, "")}\nmodule.context.use('/${argv.collection}', require('./api/${argv.collection}'), '${argv.collection}');\n`;
    yield fs.writeFile(mainPath, newMain);
  });

  function handler(_x) {
    return _ref.apply(this, arguments);
  }

  return handler;
})();