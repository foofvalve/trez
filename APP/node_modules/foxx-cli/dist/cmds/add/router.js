"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { white } = require("chalk");
const { common } = require("../../util/cli");
const { fatal } = require("../../util/log");
const generator = require("../../generator");
const fs = require("../../util/fs");
const path = require("path");

const command = exports.command = "router <name>";
exports.description = "Add a router";
const describe = 'Creates a router file under "api/<name>.js" and adds it to the main JavaScript file of the service.';

const args = [["name", "Name of the router to add."]];

exports.builder = yargs => common(yargs, { command, describe, args }).example("$0 add router kittens", 'Adds a router "kittens" to the local service');

exports.handler = (() => {
  var _ref = _asyncToGenerator(function* (argv) {
    const manifestPath = path.resolve(process.cwd(), "manifest.json");
    if (!(yield fs.exists(manifestPath))) {
      fatal("Current directory does not contain a manifest file.");
    }
    const routers = path.resolve(process.cwd(), "api");
    const router = path.resolve(routers, `${argv.name}.js`);
    if (yield fs.exists(router)) {
      fatal(`Router "${white(router)}" already exists.`);
    }
    const manifest = JSON.parse((yield fs.readFile(manifestPath)));
    const mainPath = path.resolve(process.cwd(), manifest.main || "index.js");
    if (!(yield fs.exists(mainPath))) {
      yield fs.writeFile(mainPath, (yield generator.generateIndex()));
    }
    if (!(yield fs.exists(routers))) {
      yield fs.mkdir(routers);
    }
    yield fs.writeFile(router, (yield generator.generateRouter()));
    const main = yield fs.readFile(mainPath, "utf-8");
    const newMain = `${main.replace(/\n$/, "")}\nmodule.context.use('/${argv.name}', require('./api/${argv.name}'), '${argv.name}');\n`;
    yield fs.writeFile(mainPath, newMain);
  });

  function handler(_x) {
    return _ref.apply(this, arguments);
  }

  return handler;
})();