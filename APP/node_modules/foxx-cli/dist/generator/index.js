"use strict";

let generateFile = (() => {
  var _ref = _asyncToGenerator(function* (name, data) {
    const template = readFileSync(join(TEMPLATE_PATH, `${name}.ejs`), "utf-8");
    return render(template, data);
  });

  return function generateFile(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

let generateLicense = (() => {
  var _ref2 = _asyncToGenerator(function* (options) {
    if (!options.license) return generateFile("LICENSE", options);
    return require(`spdx-license-list/licenses/${options.license}.json`).standardLicenseTemplate.replace(/<<beginOptional;name=[^>]+>>/g, "").replace(/<<endOptional>>/g, "");
  });

  return function generateLicense(_x3) {
    return _ref2.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { render } = require("ejs");
const { join } = require("path");
const { readFileSync } = require("fs");
const inflect = require("i")();

const TEMPLATE_PATH = join(__dirname, "..", "..", "templates");

function generateManifest(options) {
  const manifest = {
    $schema: "http://json.schemastore.org/foxx-manifest",
    main: options.mainFile,
    engines: {
      arangodb: options.engineVersion
    }
  };

  if (options.name) manifest.name = options.name;
  if (options.version) manifest.version = options.version;
  if (options.license) manifest.license = options.license;
  if (options.authorEmail) {
    manifest.author = `${options.authorName} <${options.authorEmail}>`;
  } else if (options.authorName) manifest.author = options.authorName;

  if (options.description) manifest.description = options.description;
  if (options.configuration) manifest.configuration = options.configuration;
  if (options.dependencies) manifest.dependencies = options.dependencies;
  if (options.provides) manifest.provides = options.provides;

  if (options.documentCollections && options.documentCollections.length || options.edgeCollections && options.edgeCollections.length) {
    manifest.scripts = {};
    manifest.scripts.setup = "scripts/setup.js";
    manifest.scripts.teardown = "scripts/teardown.js";
  }
  if (options.tests) manifest.tests = options.tests;

  return JSON.stringify(manifest, null, 2);
}

exports.generateFiles = (() => {
  var _ref3 = _asyncToGenerator(function* (options) {
    const files = [];
    files.push({
      name: "manifest.json",
      content: generateManifest(options)
    });
    files.push({
      name: "index.js",
      content: yield generateFile(options.example ? "example/index.js" : "index.js", options)
    });
    files.push({
      name: "README.md",
      content: yield generateFile("README.md", options)
    });
    if (options.license) {
      files.push({
        name: "LICENSE",
        content: yield generateLicense(options)
      });
    }
    const collections = [];
    if (options.documentCollections) {
      for (const collection of options.documentCollections) {
        collections.push([collection, false]);
      }
    }
    if (options.edgeCollections) {
      for (const collection of options.edgeCollections) {
        collections.push([collection, true]);
      }
    }
    if (options.generateCrudRoutes) {
      for (const [collection, isEdgeCollection] of collections) {
        files.push({
          name: `api/${collection}.js`,
          content: yield exports.generateCrud(collection, isEdgeCollection)
        });
      }
    }
    if (collections.length) {
      files.push({
        name: "scripts/setup.js",
        content: yield generateFile("setup.js", options)
      });
      files.push({
        name: "scripts/teardown.js",
        content: yield generateFile("teardown.js", options)
      });
    }

    return files;
  });

  return function (_x4) {
    return _ref3.apply(this, arguments);
  };
})();

exports.generateCrud = (() => {
  var _ref4 = _asyncToGenerator(function* (collection, isEdgeCollection, prefixed = true) {
    let singular = inflect.singularize(collection);
    if (singular === collection) singular += "Item";
    let plural = inflect.pluralize(singular);
    if (plural === singular) plural = collection;
    return yield generateFile("crud.js", {
      collection,
      isEdgeCollection,
      singular,
      plural,
      prefixed
    });
  });

  return function (_x5, _x6) {
    return _ref4.apply(this, arguments);
  };
})();

exports.generateScript = _asyncToGenerator(function* () {
  return yield generateFile("script.js", {});
});

exports.generateRouter = _asyncToGenerator(function* () {
  return yield generateFile("router.js", {});
});

exports.generateIndex = _asyncToGenerator(function* () {
  return yield generateFile("index.js", {});
});

exports.generateTest = _asyncToGenerator(function* () {
  return yield generateFile("test.js", {});
});