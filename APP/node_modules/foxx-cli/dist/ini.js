"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { homedir } = require("os");
const { resolve } = require("path");
const { encode, decode } = require("ini");
const { exists, readFile, writeFile } = require("./util/fs");

const RC_FILENAME = ".foxxrc";

function getRcFilePath() {
  return process.env.FOXXRC_PATH || resolve(homedir(), RC_FILENAME);
}

exports.load = (() => {
  var _ref = _asyncToGenerator(function* () {
    const defaults = {
      server: {}
    };
    const rcfile = getRcFilePath();
    if (!(yield exists(rcfile))) {
      return defaults;
    }
    const data = yield readFile(rcfile, "utf-8");
    const obj = decode(data);
    return Object.assign(defaults, obj);
  });

  function load() {
    return _ref.apply(this, arguments);
  }

  return load;
})();

exports.save = (() => {
  var _ref2 = _asyncToGenerator(function* (obj) {
    const rcfile = getRcFilePath();
    const data = encode(obj);
    yield writeFile(rcfile, data);
  });

  function save(_x) {
    return _ref2.apply(this, arguments);
  }

  return save;
})();