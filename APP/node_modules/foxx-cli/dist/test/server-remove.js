/* global describe, it, beforeEach */
"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require("path");
const foxx = require("./util");
const expect = require("chai").expect;
const os = require("os");
const fs = require("fs");

const foxxRcFile = path.resolve(os.tmpdir(), ".foxxrc");

describe("Foxx server remove", () => {
  beforeEach(_asyncToGenerator(function* () {
    if (fs.existsSync(foxxRcFile)) {
      fs.unlinkSync(foxxRcFile);
    }
    yield foxx("server set test1 //localhost:8529");
    yield foxx("server set test2 //localhost:8530");
  }));

  it("should show added server", _asyncToGenerator(function* () {
    yield foxx("server remove test1");
    const content1 = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content1.replace(/\r\n/g, "\n")).to.equal("[server.test2]\nurl=http://localhost:8530\ndatabase=_system\nusername=root\npassword=\n");
    yield foxx("server remove test2");
    const content2 = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content2).to.equal("");
  }));

  it("via alias should show added server", _asyncToGenerator(function* () {
    yield foxx("remote rm test1");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test2]\nurl=http://localhost:8530\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("verbose should show added server with password", _asyncToGenerator(function* () {
    yield foxx("server remove test1 --verbose");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test2]\nurl=http://localhost:8530\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("verbose via alias should show added server with password", _asyncToGenerator(function* () {
    yield foxx("server remove test1 -v");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test2]\nurl=http://localhost:8530\ndatabase=_system\nusername=root\npassword=\n");
  }));
});