/* global describe, it, before, after, beforeEach, afterEach */
"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require("path");
const Database = require("arangojs");
const expect = require("chai").expect;
const foxx = require("./util");
const fs = require("fs");

const ARANGO_VERSION = Number(process.env.ARANGO_VERSION || 30000);
const ARANGO_URL = process.env.TEST_ARANGODB_URL || "http://localhost:8529";
const ARANGO_USERNAME = process.env.ARANGO_USERNAME || "root";

const mount = "/uninstall-test";
const basePath = path.resolve(__dirname, "..", "..", "fixtures");

describe("Foxx service uninstalled", () => {
  const db = new Database({
    url: ARANGO_URL,
    arangoVersion: ARANGO_VERSION
  });

  beforeEach(_asyncToGenerator(function* () {
    try {
      yield db.installService(mount, fs.readFileSync(path.resolve(basePath, "minimal-working-service.zip")));
    } catch (e) {
      // noop
    }
  }));

  afterEach(_asyncToGenerator(function* () {
    try {
      yield db.uninstallService(mount, { force: true });
    } catch (e) {
      // noop
    }
  }));

  it("via alias remove should not be available", _asyncToGenerator(function* () {
    yield foxx(`remove ${mount}`);
    try {
      yield db.route(mount).get();
      expect.fail();
    } catch (e) {
      expect(e).to.have.property("statusCode", 404);
    }
  }));

  it("via alias purge should not be available", _asyncToGenerator(function* () {
    yield foxx(`purge ${mount}`);
    try {
      yield db.route(mount).get();
      expect.fail();
    } catch (e) {
      expect(e).to.have.property("statusCode", 404);
    }
  }));

  it("with alternative server URL should not be available", _asyncToGenerator(function* () {
    yield foxx(`uninstall --server ${ARANGO_URL} ${mount}`);
    try {
      yield db.route(mount).get();
      expect.fail();
    } catch (e) {
      expect(e).to.have.property("statusCode", 404);
    }
  }));

  it("with alternative server URL (short option) should not be available", _asyncToGenerator(function* () {
    yield foxx(`uninstall -H ${ARANGO_URL} ${mount}`);
    try {
      yield db.route(mount).get();
      expect.fail();
    } catch (e) {
      expect(e).to.have.property("statusCode", 404);
    }
  }));

  it("with alternative database should not be available", _asyncToGenerator(function* () {
    yield foxx(`uninstall --database _system ${mount}`);
    try {
      yield db.route(mount).get();
      expect.fail();
    } catch (e) {
      expect(e).to.have.property("statusCode", 404);
    }
  }));

  it("with alternative database (short option) should not be available", _asyncToGenerator(function* () {
    yield foxx(`uninstall -D _system ${mount}`);
    try {
      yield db.route(mount).get();
      expect.fail();
    } catch (e) {
      expect(e).to.have.property("statusCode", 404);
    }
  }));

  it("with alternative username should be available", _asyncToGenerator(function* () {
    yield foxx(`uninstall --username ${ARANGO_USERNAME} ${mount}`);
    try {
      yield db.route(mount).get();
      expect.fail();
    } catch (e) {
      expect(e).to.have.property("statusCode", 404);
    }
  }));

  it("with alternative username should be available (short option)", _asyncToGenerator(function* () {
    yield foxx(`uninstall -u ${ARANGO_USERNAME} ${mount}`);
    try {
      yield db.route(mount).get();
      expect.fail();
    } catch (e) {
      expect(e).to.have.property("statusCode", 404);
    }
  }));

  describe("with a password file", () => {
    const user = "testuser";
    const passwordFilePath = path.resolve(basePath, "passwordFile");
    const passwd = fs.readFileSync(passwordFilePath, "utf-8");
    before(_asyncToGenerator(function* () {
      db.route("/_api/user").post({
        user,
        passwd
      });
      db.route(`/_api/user/${user}/database/_system`).put({ grant: "rw" });
    }));
    after(_asyncToGenerator(function* () {
      try {
        db.route(`/_api/user/${user}`).delete();
      } catch (e) {
        // noop
      }
    }));
    it("should not be available", _asyncToGenerator(function* () {
      yield foxx(`uninstall --username ${user} --password-file ${passwordFilePath} ${mount}`);
      try {
        yield db.route(mount).get();
        expect.fail();
      } catch (e) {
        expect(e).to.have.property("statusCode", 404);
      }
    }));
  });

  it("should run its teardown script by default", _asyncToGenerator(function* () {
    const col = `${mount}_setup_teardown`.replace(/\//, "").replace(/-/g, "_");
    yield foxx(`replace ${mount} ${path.resolve(basePath, "minimal-working-setup-teardown.zip")}`);
    const info = yield db.collection(col).get();
    expect(info).to.have.property("name", col);
    yield foxx(`uninstall ${mount}`);
    try {
      yield db.collection(col).get();
      expect.fail();
    } catch (e) {
      expect(e.errorNum).to.equal(1203);
    }
  }));

  it("should run its teardown script when enabled", _asyncToGenerator(function* () {
    const col = `${mount}_setup_teardown`.replace(/\//, "").replace(/-/g, "_");
    yield foxx(`replace ${mount} ${path.resolve(basePath, "minimal-working-setup-teardown.zip")}`);
    yield foxx(`uninstall --teardown ${mount}`);
    try {
      yield db.collection(col).get();
      expect.fail();
    } catch (e) {
      expect(e.errorNum).to.equal(1203);
    }
  }));

  it("should not run its teardown script when disabled", _asyncToGenerator(function* () {
    const col = `${mount}_setup_teardown`.replace(/\//, "").replace(/-/g, "_");
    try {
      yield foxx(`replace ${mount} ${path.resolve(basePath, "minimal-working-setup-teardown.zip")}`);
      yield foxx(`uninstall --no-teardown ${mount}`);
      const info = yield db.collection(col).get();
      expect(info).to.have.property("name", col);
    } finally {
      try {
        yield db.collection(col).drop();
      } catch (e) {
        // noop
      }
    }
  }));

  it("should not fail when mount is invalid", _asyncToGenerator(function* () {
    yield foxx("uninstall /dev/null");
  }));
});