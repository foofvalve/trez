/* global describe, it, beforeEach */
"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require("path");
const foxx = require("./util");
const expect = require("chai").expect;
const os = require("os");
const fs = require("fs");

const foxxRcFile = path.resolve(os.tmpdir(), ".foxxrc");

describe("Foxx server set", () => {
  beforeEach(_asyncToGenerator(function* () {
    if (fs.existsSync(foxxRcFile)) {
      fs.unlinkSync(foxxRcFile);
    }
  }));

  it("first executed should create rc file", _asyncToGenerator(function* () {
    yield foxx("server set test //localhost:8529");
    expect(fs.existsSync(foxxRcFile)).to.equal(true);
  }));

  it("should add server to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test //localhost:8529");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=http://localhost:8529\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("via alias should add server to rc file", _asyncToGenerator(function* () {
    yield foxx("remote add test //localhost:8529");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=http://localhost:8529\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("should add http server to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test http://localhost:8529");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=http://localhost:8529\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("should add https server to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test https://localhost:8529");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=https://localhost:8529\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("should add tcp server to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test tcp://localhost:8529");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=tcp://localhost:8529\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("should add ssl server to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test ssl://localhost:8529");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=ssl://localhost:8529\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("should add server with credentials to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test http://admin:hunter2@localhost:8529");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=http://admin:hunter2@localhost:8529\ndatabase=_system\n");
  }));

  it("should add unix socket server to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test unix:///tmp/arangod.sock");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=unix:///tmp/arangod.sock\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("should add http+unix socket server to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test http+unix:///tmp/arangod.sock");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=http+unix:///tmp/arangod.sock\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("should add http://unix: socket server to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test http://unix:/tmp/arangod.sock");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=http://unix:/tmp/arangod.sock\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("executed two time should add both server to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test1 //localhost:8529");
    yield foxx("server set test2 //localhost:8530");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test1]\nurl=http://localhost:8529\ndatabase=_system\nusername=root\npassword=\n\n[server.test2]\nurl=http://localhost:8530\ndatabase=_system\nusername=root\npassword=\n");
  }));

  it("should add server with alternative database to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test //localhost:8529 --database test");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=http://localhost:8529\ndatabase=test\nusername=root\npassword=\n");
  }));

  it("should add server with alternative database to rc file using alias", _asyncToGenerator(function* () {
    yield foxx("server set test //localhost:8529 -D test");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=http://localhost:8529\ndatabase=test\nusername=root\npassword=\n");
  }));

  it("should add server with alternative username to rc file", _asyncToGenerator(function* () {
    yield foxx("server set test //localhost:8529 --username test");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=http://localhost:8529\ndatabase=_system\nusername=test\npassword=\n");
  }));

  it("should add server with alternative username to rc file using alias", _asyncToGenerator(function* () {
    yield foxx("server set test //localhost:8529 -u test");
    const content = fs.readFileSync(foxxRcFile, "utf-8");
    expect(content.replace(/\r\n/g, "\n")).to.equal("[server.test]\nurl=http://localhost:8529\ndatabase=_system\nusername=test\npassword=\n");
  }));

  it("should fail when server URL is not valid", _asyncToGenerator(function* () {
    try {
      yield foxx("server set test not-valid");
    } catch (e) {
      expect(fs.existsSync(foxxRcFile)).to.equal(false);
      return;
    }
    expect.fail();
  }));
});