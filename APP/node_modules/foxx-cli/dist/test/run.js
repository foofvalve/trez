/* global describe, it, before, after */
"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require("path");
const Database = require("arangojs");
const foxx = require("./util");
const expect = require("chai").expect;
const fs = require("fs");

const ARANGO_VERSION = Number(process.env.ARANGO_VERSION || 30000);
const ARANGO_URL = process.env.TEST_ARANGODB_URL || "http://localhost:8529";
const ARANGO_USERNAME = process.env.ARANGO_USERNAME || "root";

const mount = "/run-test";
const basePath = path.resolve(__dirname, "..", "..", "fixtures");

describe("Foxx service run", () => {
  const db = new Database({
    url: ARANGO_URL,
    arangoVersion: ARANGO_VERSION
  });

  before(_asyncToGenerator(function* () {
    yield db.installService(mount, fs.readFileSync(path.resolve(basePath, "echo-script.zip")));
  }));

  after(_asyncToGenerator(function* () {
    try {
      yield db.uninstallService(mount, { force: true });
    } catch (e) {
      // noop
    }
  }));

  it("should pass argv (empty object) to script and return exports", _asyncToGenerator(function* () {
    const resp = yield foxx(`run ${mount} echo {}`);
    expect(JSON.parse(resp)).to.eql([{}]);
  }));

  it("should pass argv to script and return exports", _asyncToGenerator(function* () {
    const resp = yield foxx(`run ${mount} echo {"hello":"world"}`);
    expect(JSON.parse(resp)).to.eql([{ hello: "world" }]);
  }));

  it("should treat array script argv like any other script argv", _asyncToGenerator(function* () {
    const resp = yield foxx(`run ${mount} echo ["yes","please"]`);
    expect(JSON.parse(resp)).to.eql([["yes", "please"]]);
  }));

  it("via alias should pass argv to script and return exports", _asyncToGenerator(function* () {
    const resp = yield foxx(`script ${mount} echo {}`);
    expect(JSON.parse(resp)).to.eql([{}]);
  }));

  it("non-existing script should not be available", _asyncToGenerator(function* () {
    try {
      yield foxx(`run ${mount} no`);
    } catch (e) {
      return;
    }
    expect.fail();
  }));

  it("with alternative server URL should pass argv", _asyncToGenerator(function* () {
    const resp = yield foxx(`run ${mount} echo {} --server ${ARANGO_URL}`);
    expect(JSON.parse(resp)).to.eql([{}]);
  }));

  it("with alternative server URL (short option) should pass argv", _asyncToGenerator(function* () {
    const resp = yield foxx(`run ${mount} echo {} -H ${ARANGO_URL}`);
    expect(JSON.parse(resp)).to.eql([{}]);
  }));

  it("with alternative database should pass argv", _asyncToGenerator(function* () {
    const resp = yield foxx(`run ${mount} echo {} --database _system`);
    expect(JSON.parse(resp)).to.eql([{}]);
  }));

  it("with alternative database (short option) should pass argv", _asyncToGenerator(function* () {
    const resp = yield foxx(`run ${mount} echo {} -D _system`);
    expect(JSON.parse(resp)).to.eql([{}]);
  }));

  it("with alternative username should pass argv", _asyncToGenerator(function* () {
    const resp = yield foxx(`run ${mount} echo {} --username ${ARANGO_USERNAME}`);
    expect(JSON.parse(resp)).to.eql([{}]);
  }));

  it("with alternative username should pass argv (short option)", _asyncToGenerator(function* () {
    const resp = yield foxx(`run ${mount} echo {} -u ${ARANGO_USERNAME}`);
    expect(JSON.parse(resp)).to.eql([{}]);
  }));

  describe("with a password file", () => {
    const user = "testuser";
    const passwordFilePath = path.resolve(basePath, "passwordFile");
    const passwd = fs.readFileSync(passwordFilePath, "utf-8");
    before(_asyncToGenerator(function* () {
      db.route("/_api/user").post({
        user,
        passwd
      });
      db.route(`/_api/user/${user}/database/_system`).put({ grant: "rw" });
    }));
    after(_asyncToGenerator(function* () {
      try {
        db.route(`/_api/user/${user}`).delete();
      } catch (e) {
        // noop
      }
    }));
    it("should pass argv", _asyncToGenerator(function* () {
      const resp = yield foxx(`run ${mount} echo {} --username ${user} --password-file ${passwordFilePath}`);
      expect(JSON.parse(resp)).to.eql([{}]);
    }));
  });

  it("should fail when mount is invalid", _asyncToGenerator(function* () {
    try {
      yield foxx(`run /dev/null echo`);
    } catch (e) {
      return;
    }
    expect.fail();
  }));

  it("should pass argv to script via stdin and return exports", _asyncToGenerator(function* () {
    const input = '{"hello":"world"}';
    const resp = yield foxx(`run ${mount} echo @`, false, { input });
    expect(JSON.parse(resp)).to.eql([{ hello: "world" }]);
  }));
});