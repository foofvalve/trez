/* global describe, it, before, beforeEach, after, afterEach */
"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require("path");
const Database = require("arangojs");
const expect = require("chai").expect;
const foxx = require("./util");
const helper = require("./helper");
const fs = require("fs");

const ARANGO_VERSION = Number(process.env.ARANGO_VERSION || 30000);
const ARANGO_URL = process.env.TEST_ARANGODB_URL || "http://localhost:8529";
const ARANGO_USERNAME = process.env.ARANGO_USERNAME || "root";

const mount = "/replace-test";
const basePath = path.resolve(__dirname, "..", "..", "fixtures");
const serviceServiceMount = "/foxx-crud-test-download";
const servicePath = path.resolve(basePath, "minimal-working-service.zip");

describe("Foxx service replaced", () => {
  const db = new Database({
    url: ARANGO_URL,
    arangoVersion: ARANGO_VERSION
  });

  let arangoPaths;
  before(_asyncToGenerator(function* () {
    yield db.installService(serviceServiceMount, fs.readFileSync(path.resolve(basePath, "service-service-service.zip")));
    arangoPaths = (yield db.route(serviceServiceMount).get()).body;
  }));

  after(_asyncToGenerator(function* () {
    try {
      yield db.uninstallService(serviceServiceMount, { force: true });
    } catch (e) {
      // noop
    }
  }));

  beforeEach(_asyncToGenerator(function* () {
    try {
      yield db.installService(mount, fs.readFileSync(path.resolve(basePath, "minimal-working-service.zip")));
    } catch (e) {
      // noop
    }
  }));

  afterEach(_asyncToGenerator(function* () {
    try {
      yield db.uninstallService(mount, { force: true });
    } catch (e) {
      // noop
    }
  }));

  const cases = helper.crudCases();

  for (const c of cases) {
    it(`via ${c.name} should be available`, _asyncToGenerator(function* () {
      yield foxx(`replace ${mount} ${c.source(arangoPaths)}`);
      const res = yield db.route(mount).get();
      expect(res.body).to.eql({ hello: "world" });
    }));
  }

  it("in development mode should be available", _asyncToGenerator(function* () {
    yield foxx(`replace --development ${mount} ${servicePath}`);
    const res = yield db.route(mount).get();
    expect(res.body).to.eql({ hello: "world" });
    const info = yield db.getService(mount);
    expect(info.development).to.equal(true);
  }));

  it("in development mode (short option) should be available", _asyncToGenerator(function* () {
    yield foxx(`replace --dev ${mount} ${servicePath}`);
    const res = yield db.route(mount).get();
    expect(res.body).to.eql({ hello: "world" });
    const info = yield db.getService(mount);
    expect(info.development).to.equal(true);
  }));

  it("with alternative server URL should be available", _asyncToGenerator(function* () {
    yield foxx(`replace --server ${ARANGO_URL} ${mount} ${servicePath}`);
    const res = yield db.route(mount).get();
    expect(res.body).to.eql({ hello: "world" });
  }));

  it("with alternative server URL (short option) should be available", _asyncToGenerator(function* () {
    yield foxx(`replace -H ${ARANGO_URL} ${mount} ${servicePath}`);
    const res = yield db.route(mount).get();
    expect(res.body).to.eql({ hello: "world" });
  }));

  it("with alternative database should be available", _asyncToGenerator(function* () {
    yield foxx(`replace --database _system ${mount} ${servicePath}`);
    const res = yield db.route(mount).get();
    expect(res.body).to.eql({ hello: "world" });
  }));

  it("with alternative database (short option) should be available", _asyncToGenerator(function* () {
    yield foxx(`replace -D _system ${mount} ${servicePath}`);
    const res = yield db.route(mount).get();
    expect(res.body).to.eql({ hello: "world" });
  }));

  it("with alternative username should be available", _asyncToGenerator(function* () {
    yield foxx(`replace --username ${ARANGO_USERNAME} ${mount} ${servicePath}`);
    const res = yield db.route(mount).get();
    expect(res.body).to.eql({ hello: "world" });
  }));

  it("with alternative username should be available (short option)", _asyncToGenerator(function* () {
    yield foxx(`replace -u ${ARANGO_USERNAME} ${mount} ${servicePath}`);
    const res = yield db.route(mount).get();
    expect(res.body).to.eql({ hello: "world" });
  }));

  describe("with a password file", () => {
    const user = "testuser";
    const passwordFilePath = path.resolve(basePath, "passwordFile");
    const passwd = fs.readFileSync(passwordFilePath, "utf-8");
    before(_asyncToGenerator(function* () {
      db.route("/_api/user").post({
        user,
        passwd
      });
      db.route(`/_api/user/${user}/database/_system`).put({ grant: "rw" });
    }));
    after(_asyncToGenerator(function* () {
      try {
        db.route(`/_api/user/${user}`).delete();
      } catch (e) {
        // noop
      }
    }));
    it("should be available", _asyncToGenerator(function* () {
      yield foxx(`replace --username ${user} --password-file ${passwordFilePath} ${mount} ${servicePath}`);
      const res = yield db.route(mount).get();
      expect(res.body).to.eql({ hello: "world" });
    }));
  });

  it("should run its setup script by default", _asyncToGenerator(function* () {
    const col = `${mount}_setup_teardown`.replace(/\//, "").replace(/-/g, "_");
    try {
      yield db.collection(col).get();
      expect.fail();
    } catch (e) {
      expect(e.errorNum).to.equal(1203);
    }
    yield foxx(`replace ${mount} ${path.resolve(basePath, "minimal-working-setup-teardown.zip")}`);
    const info = yield db.collection(col).get();
    expect(info).to.have.property("name", col);
  }));

  it("should run its setup script when enabled", _asyncToGenerator(function* () {
    const col = `${mount}_setup_teardown`.replace(/\//, "").replace(/-/g, "_");
    try {
      yield db.collection(col).get();
      expect.fail();
    } catch (e) {
      expect(e.errorNum).to.equal(1203);
    }
    yield foxx(`replace --setup ${mount} ${path.resolve(basePath, "minimal-working-setup-teardown.zip")}`);
    const info = yield db.collection(col).get();
    expect(info).to.have.property("name", col);
  }));

  it("should not run its setup script when disabled", _asyncToGenerator(function* () {
    const col = `${mount}_setup_teardown`.replace(/\//, "").replace(/-/g, "_");
    try {
      yield db.collection(col).get();
      expect.fail();
    } catch (e) {
      expect(e.errorNum).to.equal(1203);
    }
    yield foxx(`replace --no-setup ${mount} ${path.resolve(basePath, "minimal-working-setup-teardown.zip")}`);
    try {
      yield db.collection(col).get();
      expect.fail();
    } catch (e) {
      expect(e.errorNum).to.equal(1203);
    }
  }));

  it("should run its teardown script by default", _asyncToGenerator(function* () {
    const col = `${mount}_setup_teardown`.replace(/\//, "").replace(/-/g, "_");
    yield foxx(`replace ${mount} ${path.resolve(basePath, "minimal-working-setup-teardown.zip")}`);
    const info = yield db.collection(col).get();
    expect(info).to.have.property("name", col);
    yield foxx(`replace ${mount} ${path.resolve(basePath, "minimal-working-service.zip")}`);
    try {
      yield db.collection(col).get();
      expect.fail();
    } catch (e) {
      expect(e.errorNum).to.equal(1203);
    }
  }));

  it("should run its teardown script when enabled", _asyncToGenerator(function* () {
    const col = `${mount}_setup_teardown`.replace(/\//, "").replace(/-/g, "_");
    yield foxx(`replace ${mount} ${path.resolve(basePath, "minimal-working-setup-teardown.zip")}`);
    yield foxx(`replace --teardown ${mount} ${path.resolve(basePath, "minimal-working-service.zip")}`);
    try {
      yield db.collection(col).get();
      expect.fail();
    } catch (e) {
      expect(e.errorNum).to.equal(1203);
    }
  }));

  it("should not run its teardown script when disabled", _asyncToGenerator(function* () {
    const col = `${mount}_setup_teardown`.replace(/\//, "").replace(/-/g, "_");
    try {
      yield foxx(`replace ${mount} ${path.resolve(basePath, "minimal-working-setup-teardown.zip")}`);
      yield foxx(`replace --no-teardown ${mount} ${path.resolve(basePath, "minimal-working-service.zip")}`);
      const info = yield db.collection(col).get();
      expect(info).to.have.property("name", col);
    } finally {
      try {
        yield db.collection(col).drop();
      } catch (e) {
        // noop
      }
    }
  }));

  it("with configuration should not be set by default", _asyncToGenerator(function* () {
    yield foxx(`replace ${mount} ${path.resolve(basePath, "with-configuration.zip")}`);
    const configuration = yield db.getServiceConfiguration(mount, true);
    expect(configuration).to.not.have.property("test1");
    expect(configuration).to.not.have.property("test2");
  }));

  it("with configuration should have one config set", _asyncToGenerator(function* () {
    yield foxx(`replace --cfg test1="test1" ${mount} ${path.resolve(basePath, "with-configuration.zip")}`);
    const configuration = yield db.getServiceConfiguration(mount, true);
    expect(configuration).to.have.property("test1", "test1");
    expect(configuration).to.not.have.property("test2");
  }));

  it("with configuration should have two configs set", _asyncToGenerator(function* () {
    yield foxx(`replace --cfg test1="test1" --cfg test2="test2" ${mount} ${path.resolve(basePath, "with-configuration.zip")}`);
    const configuration = yield db.getServiceConfiguration(mount, true);
    expect(configuration).to.have.property("test1", "test1");
    expect(configuration).to.have.property("test2", "test2");
  }));

  it("with configuration should have one config set (short option)", _asyncToGenerator(function* () {
    yield foxx(`replace -c test1="test1" ${mount} ${path.resolve(basePath, "with-configuration.zip")}`);
    const configuration = yield db.getServiceConfiguration(mount, true);
    expect(configuration).to.have.property("test1", "test1");
    expect(configuration).to.not.have.property("test2");
  }));

  it("with configuration should have two configs set (short option)", _asyncToGenerator(function* () {
    yield foxx(`replace -c test1="test1" -c test2="test2" ${mount} ${path.resolve(basePath, "with-configuration.zip")}`);
    const configuration = yield db.getServiceConfiguration(mount, true);
    expect(configuration).to.have.property("test1", "test1");
    expect(configuration).to.have.property("test2", "test2");
  }));

  it("with configuration should have two configs set (mixed options)", _asyncToGenerator(function* () {
    yield foxx(`replace --cfg test1="test1" -c test2="test2" ${mount} ${path.resolve(basePath, "with-configuration.zip")}`);
    const configuration = yield db.getServiceConfiguration(mount, true);
    expect(configuration).to.have.property("test1", "test1");
    expect(configuration).to.have.property("test2", "test2");
  }));

  it("with dependencies should have not be set by default", _asyncToGenerator(function* () {
    yield foxx(`replace ${mount} ${path.resolve(basePath, "with-dependencies.zip")}`);
    const dependencies = yield db.getServiceDependencies(mount, true);
    expect(dependencies).to.not.have.property("test1");
    expect(dependencies).to.not.have.property("test2");
  }));

  it("with dependencies should have one dependency set", _asyncToGenerator(function* () {
    yield foxx(`replace --dep test1=/test1 ${mount} ${path.resolve(basePath, "with-dependencies.zip")}`);
    const dependencies = yield db.getServiceDependencies(mount, true);
    expect(dependencies).to.have.property("test1", "/test1");
    expect(dependencies).to.not.have.property("test2");
  }));

  it("with dependencies should have two dependencies set", _asyncToGenerator(function* () {
    yield foxx(`replace --dep test1=/test1 --dep test2=/test2 ${mount} ${path.resolve(basePath, "with-dependencies.zip")}`);
    const dependencies = yield db.getServiceDependencies(mount, true);
    expect(dependencies).to.have.property("test1", "/test1");
    expect(dependencies).to.have.property("test2", "/test2");
  }));

  it("with dependencies should have one dependency set (short option)", _asyncToGenerator(function* () {
    yield foxx(`replace -d test1=/test1 ${mount} ${path.resolve(basePath, "with-dependencies.zip")}`);
    const dependencies = yield db.getServiceDependencies(mount, true);
    expect(dependencies).to.have.property("test1", "/test1");
    expect(dependencies).to.not.have.property("test2");
  }));

  it("with dependencies should have two dependencies set (short option)", _asyncToGenerator(function* () {
    yield foxx(`replace -d test1=/test1 -d test2=/test2 ${mount} ${path.resolve(basePath, "with-dependencies.zip")}`);
    const dependencies = yield db.getServiceDependencies(mount, true);
    expect(dependencies).to.have.property("test1", "/test1");
    expect(dependencies).to.have.property("test2", "/test2");
  }));

  it("with dependencies should have two dependencies set (mixed options)", _asyncToGenerator(function* () {
    yield foxx(`replace --dep test1=/test1 -d test2=/test2 ${mount} ${path.resolve(basePath, "with-dependencies.zip")}`);
    const dependencies = yield db.getServiceDependencies(mount, true);
    expect(dependencies).to.have.property("test1", "/test1");
    expect(dependencies).to.have.property("test2", "/test2");
  }));

  it("should fail when mount is invalid", _asyncToGenerator(function* () {
    try {
      yield foxx(`replace /dev/null ${path.resolve(basePath, "minimal-working-service.zip")}`);
    } catch (e) {
      try {
        yield db.route("/dev/null").get();
      } catch (e) {
        expect(e).to.have.property("statusCode", 404);
        return;
      }
    }
    expect.fail();
  }));
});