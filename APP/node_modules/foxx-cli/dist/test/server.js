/* global describe, it, before, beforeEach, after, afterEach */
"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require("path");
const Database = require("arangojs");
const foxx = require("./util");
const expect = require("chai").expect;
const os = require("os");
const fs = require("fs");

const ARANGO_VERSION = Number(process.env.ARANGO_VERSION || 30000);
const ARANGO_URL = process.env.TEST_ARANGODB_URL || "http://localhost:8529";

const mount = "/server-test";
const basePath = path.resolve(__dirname, "..", "..", "fixtures");

const foxxRcFile = path.resolve(os.tmpdir(), ".foxxrc");

describe("Foxx with server", () => {
  const db = new Database({
    url: ARANGO_URL,
    arangoVersion: ARANGO_VERSION
  });

  before(_asyncToGenerator(function* () {
    process.env.FOXXRC_PATH = foxxRcFile;
  }));

  after(_asyncToGenerator(function* () {
    process.env.FOXXRC_PATH = undefined;
  }));

  beforeEach(_asyncToGenerator(function* () {
    if (fs.existsSync(foxxRcFile)) {
      fs.unlinkSync(foxxRcFile);
    }
  }));

  afterEach(_asyncToGenerator(function* () {
    try {
      yield yield foxx(`uninstall ${mount}`);
    } catch (e) {
      // noop
    }
  }));

  it("with alternative server should be available", _asyncToGenerator(function* () {
    yield foxx(`server set test ${ARANGO_URL}`);
    yield foxx(`install --server test ${mount} ${path.resolve(basePath, "minimal-working-service.zip")}`);
    const res = yield db.route(mount).get();
    expect(res.body).to.eql({ hello: "world" });
  }));
});