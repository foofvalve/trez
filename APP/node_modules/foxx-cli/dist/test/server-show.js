/* global describe, it, before */
"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require("path");
const foxx = require("./util");
const expect = require("chai").expect;
const os = require("os");
const fs = require("fs");

const foxxRcFile = path.resolve(os.tmpdir(), ".foxxrc");

describe("Foxx server show", () => {
  before(_asyncToGenerator(function* () {
    if (fs.existsSync(foxxRcFile)) {
      fs.unlinkSync(foxxRcFile);
    }
    yield foxx("server set test1 //localhost:8529");
    yield foxx("server set test2 //localhost:8530");
  }));

  it("should show added server", _asyncToGenerator(function* () {
    const server1 = yield foxx("server show test1");
    expect(server1).to.equal("URL: http://localhost:8529\nDatabase: _system\nUsername: root\nPassword: (hidden)\n");
    const server2 = yield foxx("server show test2");
    expect(server2).to.equal("URL: http://localhost:8530\nDatabase: _system\nUsername: root\nPassword: (hidden)\n");
  }));

  it("via alias should show added server", _asyncToGenerator(function* () {
    const server = yield foxx("remote info test1");
    expect(server).to.equal("URL: http://localhost:8529\nDatabase: _system\nUsername: root\nPassword: (hidden)\n");
  }));

  it("verbose should show added server with password", _asyncToGenerator(function* () {
    const server = yield foxx("server show test1 --verbose");
    expect(server).to.equal("URL: http://localhost:8529\nDatabase: _system\nUsername: root\nPassword: (empty)\n");
  }));

  it("verbose via alias should show added server with password", _asyncToGenerator(function* () {
    const server = yield foxx("server show test1 -v");
    expect(server).to.equal("URL: http://localhost:8529\nDatabase: _system\nUsername: root\nPassword: (empty)\n");
  }));
});