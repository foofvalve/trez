/* eslint-disable no-control-regex */
/* global describe, it, before, beforeEach, after */
"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require("path");
const Database = require("arangojs");
const foxx = require("./util");
const expect = require("chai").expect;
const fs = require("fs");
const os = require("os");
const rmDir = require("./fs").rmDir;

const ARANGO_VERSION = Number(process.env.ARANGO_VERSION || 30000);
const ARANGO_URL = process.env.TEST_ARANGODB_URL || "http://localhost:8529";
const ARANGO_USERNAME = process.env.ARANGO_USERNAME || "root";

const mount = "/download-test";
const basePath = path.resolve(__dirname, "..", "..", "fixtures");
const tmpFile = path.resolve(os.tmpdir(), "minimal-working-service.zip");
const tmpDir = path.resolve(os.tmpdir(), "minimal-working-service");
const tmpServiceDir = path.resolve(tmpDir, "minimal-working-service");
const manifest = path.resolve(tmpServiceDir, "manifest.json");

describe("Foxx service download", () => {
  const db = new Database({
    url: ARANGO_URL,
    arangoVersion: ARANGO_VERSION
  });

  before(_asyncToGenerator(function* () {
    yield db.installService(mount, fs.readFileSync(path.resolve(basePath, "minimal-working-service.zip")));
  }));

  after(_asyncToGenerator(function* () {
    try {
      yield db.uninstallService(mount, { force: true });
    } catch (e) {
      // noop
    }
  }));

  beforeEach(_asyncToGenerator(function* () {
    if (fs.existsSync(tmpFile)) {
      try {
        fs.unlinkSync(tmpFile);
      } catch (e) {
        // noop
      }
    }
    try {
      rmDir(tmpDir);
    } catch (e) {
      // noop
    }
  }));

  it("should output bundle per default", _asyncToGenerator(function* () {
    const output = yield foxx(`download ${mount}`);
    expect(output).to.match(/^PK\u0003\u0004/);
  }));

  it("via alias should output bundle per default", _asyncToGenerator(function* () {
    const output = yield foxx(`dl ${mount}`);
    expect(output).to.match(/^PK\u0003\u0004/);
  }));

  it("should output bundle with option stdout", _asyncToGenerator(function* () {
    const output = yield foxx(`download --stdout ${mount}`);
    expect(output).to.match(/^PK\u0003\u0004/);
  }));

  it("should output bundle with alias of option stdout", _asyncToGenerator(function* () {
    const output = yield foxx(`download -O ${mount}`);
    expect(output).to.match(/^PK\u0003\u0004/);
  }));

  it("should output bundle", _asyncToGenerator(function* () {
    const output = yield foxx(`download ${mount}`);
    expect(output).to.match(/^PK\u0003\u0004/);
  }));
  it("with alternative server URL should output bundle", _asyncToGenerator(function* () {
    const output = yield foxx(`download --server ${ARANGO_URL} ${mount}`);
    expect(output).to.match(/^PK\u0003\u0004/);
  }));

  it("with alternative server URL (short option) should output bundle", _asyncToGenerator(function* () {
    const output = yield foxx(`download -H ${ARANGO_URL} ${mount}`);
    expect(output).to.match(/^PK\u0003\u0004/);
  }));

  it("with alternative database should output bundle", _asyncToGenerator(function* () {
    const output = yield foxx(`download --database _system ${mount}`);
    expect(output).to.match(/^PK\u0003\u0004/);
  }));

  it("with alternative database (short option) should output bundle", _asyncToGenerator(function* () {
    const output = yield foxx(`download -D _system ${mount}`);
    expect(output).to.match(/^PK\u0003\u0004/);
  }));

  it("with alternative username should output bundle", _asyncToGenerator(function* () {
    const output = yield foxx(`download --username ${ARANGO_USERNAME} ${mount}`);
    expect(output).to.match(/^PK\u0003\u0004/);
  }));

  it("with alternative username should output bundle (short option)", _asyncToGenerator(function* () {
    const output = yield foxx(`download -u ${ARANGO_USERNAME} ${mount}`);
    expect(output).to.match(/^PK\u0003\u0004/);
  }));

  describe("with a password file", () => {
    const user = "testuser";
    const passwordFilePath = path.resolve(basePath, "passwordFile");
    const passwd = fs.readFileSync(passwordFilePath, "utf-8");
    before(_asyncToGenerator(function* () {
      db.route("/_api/user").post({
        user,
        passwd
      });
      db.route(`/_api/user/${user}/database/_system`).put({ grant: "rw" });
    }));
    after(_asyncToGenerator(function* () {
      try {
        db.route(`/_api/user/${user}`).delete();
      } catch (e) {
        // noop
      }
    }));
    it("should output bundle", _asyncToGenerator(function* () {
      const output = yield foxx(`download --username ${user} --password-file ${passwordFilePath} ${mount}`);
      expect(output).to.match(/^PK\u0003\u0004/);
    }));
  });

  it("should write bundle to outfile", _asyncToGenerator(function* () {
    const output = yield foxx(`download --outfile ${tmpFile} ${mount}`);
    expect(output).to.equal("");
    expect(fs.existsSync(tmpFile)).to.equal(true);
    expect(fs.readFileSync(tmpFile, "utf-8")).to.match(/^PK\u0003\u0004/);
  }));

  it("via alias should write bundle to outfile", _asyncToGenerator(function* () {
    const output = yield foxx(`download -o ${tmpFile} ${mount}`);
    expect(output).to.equal("");
    expect(fs.existsSync(tmpFile)).to.equal(true);
    expect(fs.readFileSync(tmpFile, "utf-8")).to.match(/^PK\u0003\u0004/);
  }));

  it("should not overwrite outfile per default", _asyncToGenerator(function* () {
    fs.writeFileSync(tmpFile, "no");
    try {
      yield foxx(`download --outfile ${tmpFile} ${mount}`);
    } catch (e) {
      expect(fs.existsSync(tmpFile)).to.equal(true);
      expect(fs.readFileSync(tmpFile, "utf-8")).to.equal("no");
      return;
    }
    expect.fail();
  }));

  it("should overwrite outfile when forced", _asyncToGenerator(function* () {
    fs.writeFileSync(tmpFile, "");
    const output = yield foxx(`download --outfile ${tmpFile} --force ${mount}`);
    expect(output).to.equal("");
    expect(fs.existsSync(tmpFile)).to.equal(true);
    expect(fs.readFileSync(tmpFile, "utf-8")).to.match(/^PK\u0003\u0004/);
  }));

  it("should overwrite outfile when forced via alias", _asyncToGenerator(function* () {
    fs.writeFileSync(tmpFile, "");
    const output = yield foxx(`download -o ${tmpFile} -f ${mount}`);
    expect(output).to.equal("");
    expect(fs.existsSync(tmpFile)).to.equal(true);
    expect(fs.readFileSync(tmpFile, "utf-8")).to.match(/^PK\u0003\u0004/);
  }));

  it("should extract bundle outfile", _asyncToGenerator(function* () {
    const output = yield foxx(`download --extract --outfile ${tmpDir} ${mount}`);
    expect(output).to.equal("");
    expect(fs.existsSync(manifest)).to.equal(true);
  }));

  it("via alias should extract bundle outfile", _asyncToGenerator(function* () {
    const output = yield foxx(`download -x -o ${tmpDir} ${mount}`);
    expect(output).to.equal("");
    expect(fs.existsSync(manifest)).to.equal(true);
  }));

  it("should not overwrite outfile per default", _asyncToGenerator(function* () {
    fs.mkdirSync(tmpDir);
    fs.mkdirSync(tmpServiceDir);
    try {
      yield foxx(`download --extract --outfile ${tmpDir} ${mount}`);
    } catch (e) {
      expect(fs.existsSync(manifest)).to.equal(false);
      return;
    }
    expect.fail();
  }));

  it("should overwrite outfile when forced", _asyncToGenerator(function* () {
    fs.mkdirSync(tmpDir);
    fs.mkdirSync(tmpServiceDir);
    yield foxx(`download --extract --outfile ${tmpDir} --force ${mount}`);
    expect(fs.existsSync(manifest)).to.equal(true);
  }));

  it("should overwrite outfile when forced via alias", _asyncToGenerator(function* () {
    fs.mkdirSync(tmpDir);
    fs.mkdirSync(tmpServiceDir);
    yield foxx(`download -x -o ${tmpDir} -f ${mount}`);
    expect(fs.existsSync(manifest)).to.equal(true);
  }));

  it("should fail when mount is invalid", _asyncToGenerator(function* () {
    try {
      yield foxx("download /dev/null");
    } catch (e) {
      return;
    }
    expect.fail();
  }));

  it("should extract in cwd when no outfile set", _asyncToGenerator(function* () {
    if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);
    const output = yield foxx(`download --extract ${mount}`, false, {
      cwd: tmpDir
    });
    expect(output).to.equal("");
    expect(fs.existsSync(manifest)).to.equal(true);
  }));

  it("should fail with options stdout and extract", _asyncToGenerator(function* () {
    try {
      yield foxx(`download --stdout --extract ${mount}`);
    } catch (e) {
      return;
    }
    expect.fail();
  }));
});